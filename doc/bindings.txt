Noble bindings for websocket

public
------

-api.broadcast = function(deviceUuid, serviceUuid, characteristicUuid, broadcast) {
-api.connect = function(deviceUuid) {
-api.disconnect = function(deviceUuid) {
-api.discoverCharacteristics = function(deviceUuid, serviceUuid, characteristicUuids) {
-api.discoverDescriptors = function(deviceUuid, serviceUuid, characteristicUuid) {
-api.discoverIncludedServices = function(deviceUuid, serviceUuid, serviceUuids) {
-api.discoverServices = function(deviceUuid, uuids) {
-api.notify = function(deviceUuid, serviceUuid, characteristicUuid, notify) {
-api.read = function(deviceUuid, serviceUuid, characteristicUuid) {
-api.readHandle = function(deviceUuid, handle) {
-api.readValue = function(deviceUuid, serviceUuid, characteristicUuid, descriptorUuid) {
-api.startScanning = function(serviceUuids, allowDuplicates) {
-api.stopScanning = function() {
-api.updateRssi = function(deviceUuid) {
-api.write = function(deviceUuid, serviceUuid, characteristicUuid, data, withoutResponse) {
-api.writeHandle = function(deviceUuid, handle, data, withoutResponse) {
-api.writeValue = function(deviceUuid, serviceUuid, characteristicUuid, descriptorUuid, data) {

-emit('broadcast', peripheralUuid, serviceUuid, characteristicUuid, state);
-emit('connect', peripheralUuid);
-emit('disconnect', peripheralUuid);
-emit('characteristicsDiscover', peripheralUuid, serviceUuid, characteristics);
-emit('descriptorsDiscover', peripheralUuid, serviceUuid, characteristicUuid, descriptors);
-emit('includedServicesDiscover', peripheralUuid, serviceUuid, includedServiceUuids);
-emit('servicesDiscover', peripheralUuid, serviceUuids);
-emit('notify', peripheralUuid, serviceUuid, characteristicUuid, state);
-emit('read', peripheralUuid, serviceUuid, characteristicUuid, data, isNotification);
emit('handleRead', handle, data);
-emit('valueRead', peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, data);
-emit('scanStart');
-emit('scanStop');
-emit('rssiUpdate', peripheralUuid, rssi);
-emit('write', peripheralUuid, serviceUuid, characteristicUuid);
emit('handleWrite', handle);
-emit('valueWrite', peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid);

-emit('stateChange', state);
-emit('discover', peripheralUuid, advertisement, rssi);

private
-------

sys-api._sendCommand = function(command) {

sys-listener._onOpen = function() {
sys-listener._onClose = function() {
sys-listener._onMessage = function(event) {

this.emit('message', JSON.parse(data));

------------------------------------------------------------------------------------

Noble bindings for linux

public
------

api.broadcast = function(peripheralUuid, serviceUuid, characteristicUuid, broadcast) {
api.connect = function(peripheralUuid) {
api.disconnect = function(peripheralUuid) {
api.discoverCharacteristics = function(peripheralUuid, serviceUuid, characteristicUuids) {
api.discoverDescriptors = function(peripheralUuid, serviceUuid, characteristicUuid) {
api.discoverIncludedServices = function(peripheralUuid, serviceUuid, serviceUuids) {
api.discoverServices = function(peripheralUuid, uuids) {
api.notify = function(peripheralUuid, serviceUuid, characteristicUuid, notify) {
api.read = function(peripheralUuid, serviceUuid, characteristicUuid) {
api.readHandle = function(peripheralUuid, handle) {
api.readValue = function(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid) {
api.startScanning = function(serviceUuids, allowDuplicates) {
api.stopScanning = function() {
api.updateRssi = function(peripheralUuid) {
api.write = function(peripheralUuid, serviceUuid, characteristicUuid, data, withoutResponse) {
api.writeHandle = function(peripheralUuid, handle, data, withoutResponse) {
api.writeValue = function(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, data) {

emit('broadcast', uuid, serviceUuid, characteristicUuid, state);
emit('connect', uuid, error);
emit('disconnect', uuid);
emit('characteristicsDiscover', uuid, serviceUuid, characteristics);
emit('descriptorsDiscover', uuid, serviceUuid, characteristicUuid, descriptorUuids);
emit('includedServicesDiscover', uuid, serviceUuid, includedServiceUuids);
emit('servicesDiscover', uuid, serviceUuids);
emit('notify', uuid, serviceUuid, characteristicUuid, state);
emit('read', uuid, serviceUuid, characteristicUuid, data, false);
emit('handleRead', uuid, handle, data);
emit('valueRead', uuid, serviceUuid, characteristicUuid, descriptorUuid, data);
emit('scanStart');
emit('scanStop');
emit('rssiUpdate', uuid, rssi);
emit('write', uuid, serviceUuid, characteristicUuid);
emit('handleWrite', uuid, handle);
emit('valueWrite', uuid, serviceUuid, characteristicUuid, descriptorUuid);

emit('stateChange', state);
emit('discover', uuid, advertisement, rssi);

private
-------

sys-api.exchangeMtu = function(peripheralUuid, mtu) {

sys-listener.onBroadcast = function(address, serviceUuid, characteristicUuid, state) {
sys-listener.onConnect = function(address, error) {
sys-listener.onDisconnect = function(address) {
sys-listener.onCharacteristicsDiscovered = function(address, serviceUuid, characteristics) {
sys-listener.onDescriptorsDiscovered = function(address, serviceUuid, characteristicUuid, descriptorUuids) {
sys-listener.onIncludedServicesDiscovered = function(address, serviceUuid, includedServiceUuids) {
sys-listener.onServicesDiscovered = function(address, serviceUuids) {
sys-listener.onNotify = function(address, serviceUuid, characteristicUuid, state) {
sys-listener.onRead = function(address, serviceUuid, characteristicUuid, data) {
sys-listener.onHandleRead = function(address, handle, data) {
sys-listener.onValueRead = function(address, serviceUuid, characteristicUuid, descriptorUuid, data) {
sys-listener.onScanStart = function() {
sys-listener.onScanStop = function() {
sys-listener.onRssi = function(address, rssi) {
sys-listener.onWrite = function(address, serviceUuid, characteristicUuid) {
sys-listener.onHandleWrite = function(address, handle) {
sys-listener.onValueWrite = function(address, serviceUuid, characteristicUuid, descriptorUuid) {

sys-listener.onStateChange = function(state) {
sys-listener.onDiscover = function(address, addressType, advertisement, rssi) {

sys-listener.onHandleNotify = function(address, handle, data) {
sys-listener.onNotification = function(address, serviceUuid, characteristicUuid, data) {
sys-listener.onMtu = function(address, mtu) {

this.emit('handleNotify', uuid, handle, data);

------------------------------------------------------------------------------------

Noble bindings for Mac Yosemite

public
-------

api.broadcast = function(deviceUuid, serviceUuid, characteristicUuid, broadcast) {
api.connect = function(deviceUuid) {
api.disconnect = function(deviceUuid) {
api.discoverCharacteristics = function(deviceUuid, serviceUuid, characteristicUuids) {
api.discoverDescriptors = function(deviceUuid, serviceUuid, characteristicUuid) {
api.discoverIncludedServices = function(deviceUuid, serviceUuid, serviceUuids) {
api.discoverServices = function(deviceUuid, uuids) {
api.notify = function(deviceUuid, serviceUuid, characteristicUuid, notify) {
api.read = function(deviceUuid, serviceUuid, characteristicUuid) {
api.readHandle = function(deviceUuid, handle) {
api.readValue = function(deviceUuid, serviceUuid, characteristicUuid, descriptorUuid) {
api.startScanning = function(serviceUuids, allowDuplicates) {
api.stopScanning = function() {
api.updateRssi = function(deviceUuid) {
api.write = function(deviceUuid, serviceUuid, characteristicUuid, data, withoutResponse) {
api.writeHandle = function(deviceUuid, handle, data, withoutResponse) {
api.writeValue = function(deviceUuid, serviceUuid, characteristicUuid, descriptorUuid, data) {

emit('broadcast', deviceUuid, this._peripherals[deviceUuid].services[i].uuid,
emit('connect', deviceUuid);
emit('disconnect', deviceUuid);
emit('characteristicsDiscover', deviceUuid, serviceUuid, characteristics);
emit('descriptorsDiscover', deviceUuid, this._peripherals[deviceUuid].services[i].uuid,
emit('includedServicesDiscover', deviceUuid, serviceUuid, includedServiceUuids);
emit('servicesDiscover', deviceUuid, serviceUuids);
emit('notify', deviceUuid, this._peripherals[deviceUuid].services[i].uuid,
emit('read', deviceUuid, this._peripherals[deviceUuid].services[i].uuid,
emit('handleRead', deviceUuid, descriptorHandle, data);
emit('valueRead', deviceUuid, this._peripherals[deviceUuid].services[i].uuid,
emit('scanStart');
emit('scanStop');
emit('rssiUpdate', deviceUuid, rssi);
emit('write', deviceUuid, serviceUuid, characteristicUuid);
emit('handleWrite', deviceUuid, descriptorHandle);
emit('valueWrite', deviceUuid, this._peripherals[deviceUuid].services[i].uuid,

emit('stateChange', state);
emit('discover', deviceUuid, advertisement, rssi);

private
-------

sys-api.sendCBMsg = function(id, args) {
sys-api.setupXpcConnection();

sys-listener.on('kCBMsgId73', function(args) {    // broadcast
sys-listener.on('kCBMsgId38', function(args) {    // connect
sys-listener.on('kCBMsgId40', function(args) {    // disconnect
sys-listener.on('kCBMsgId64', function(args) {    // characteristicsDiscover
sys-listener.on('kCBMsgId76', function(args) {    // descriptorsDiscover
sys-listener.on('kCBMsgId63', function(args) {    // includedServicesDiscover
sys-listener.on('kCBMsgId56', function(args) {    // servicesDiscover
sys-listener.on('kCBMsgId74', function(args) {    // notify
sys-listener.on('kCBMsgId71', function(args) {    // read
sys-listener.on('kCBMsgId79', function(args) {    // valueRead
sys-listener.on('kCBMsgId55', function(args) {    // rssiupdate
sys-listener.on('kCBMsgId72', function(args) {    // write
sys-listener.on('kCBMsgId80', function(args) {    // valueWrite

sys-listener.on('kCBMsgId6', function(args) {     // state change
sys-listener.on('kCBMsgId37', function(args) {    // discover

sys-listener.on('xpcError', function(message) {
sys-listener.on('xpcEvent', function(event) {

this.emit('xpcError', message);}.bind(this));
this.emit('xpcEvent', event);  }.bind(this));
this.emit('kCBMsgId' + kCBMsgId, kCBMsgArgs);

------------------------------------------------------------------------------------
